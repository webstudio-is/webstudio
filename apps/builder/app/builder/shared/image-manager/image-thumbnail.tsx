import type { KeyboardEvent, FocusEvent } from "react";
import { Box, styled } from "@webstudio-is/design-system";
import { UploadingAnimation } from "./uploading-animation";
import { ImageInfoTrigger, imageInfoTriggerCssVars } from "./image-info-tigger";
import type { AssetContainer } from "~/builder/shared/assets";
import { Filename } from "./filename";
import { Image } from "./image";
import brokenImage from "~/shared/images/broken-image-placeholder.svg";
import { theme } from "@webstudio-is/design-system";
import { isVideoFormat } from "../assets/asset-utils";

const StyledWebstudioImage = styled(Image, {
  position: "absolute",
  width: "100%",
  height: "100%",
  objectFit: "contain",

  // This is shown only if an image was not loaded and broken
  // From the spec:
  // - The pseudo-elements generated by ::before and ::after are contained by the element's formatting box,
  //   and thus don't apply to "replaced" elements such as <img>, or to <br> elements
  // Not in spec but supported by all browsers:
  // - broken image is not a "replaced" element so this style is applied
  "&::after": {
    content: "' '",
    position: "absolute",
    width: "100%",
    height: "100%",
    left: 0,
    top: 0,
    backgroundSize: "contain",
    backgroundRepeat: "no-repeat",
    backgroundPosition: "center",
    backgroundImage: `url(${brokenImage})`,
  },
});

const StyledWebstudioVideo = styled("video", {
  position: "absolute",
  width: "100%",
  height: "100%",
  objectFit: "contain",

  // This is shown only if an image was not loaded and broken
  // From the spec:
  // - The pseudo-elements generated by ::before and ::after are contained by the element's formatting box,
  //   and thus don't apply to "replaced" elements such as <img>, or to <br> elements
  // Not in spec but supported by all browsers:
  // - broken image is not a "replaced" element so this style is applied
  "&::after": {
    content: "' '",
    position: "absolute",
    width: "100%",
    height: "100%",
    left: 0,
    top: 0,
    backgroundSize: "contain",
    backgroundRepeat: "no-repeat",
    backgroundPosition: "center",
    backgroundImage: `url(${brokenImage})`,
  },
});

const ThumbnailContainer = styled(Box, {
  position: "relative",
  display: "flex",
  justifyContent: "center",
  alignItems: "center",
  flexDirection: "column",
  borderRadius: theme.borderRadius[4],
  outline: "none",
  gap: theme.spacing[3],
  overflow: "hidden",
  padding: 2,
  "&:hover": {
    ...imageInfoTriggerCssVars({ show: true }),
    backgroundColor: theme.colors.backgroundAssetcardHover,
  },
  variants: {
    status: {
      uploading: {},
      uploaded: {},
      deleting: {},
    },
    state: {
      selected: {
        outline: `1px solid ${theme.colors.borderFocus}`,
        outlineOffset: -1,
        backgroundColor: theme.colors.backgroundAssetcardHover,
        ...imageInfoTriggerCssVars({ show: true }),
      },
    },
  },
});

const Thumbnail = styled(Box, {
  width: "100%",
  height: theme.spacing[19],
  flexShrink: 0,
  position: "relative",
});

type ImageThumbnailProps = {
  assetContainer: AssetContainer;
  onDelete: (ids: Array<string>) => void;
  onSelect: (assetContainer?: AssetContainer) => void;
  onChange?: (assetContainer: AssetContainer) => void;
  state?: "selected";
};

export const ImageThumbnail = ({
  assetContainer,
  onDelete,
  onSelect,
  onChange,
  state,
}: ImageThumbnailProps) => {
  const { asset, status } = assetContainer;

  const { name, description } = asset;

  const isUploading = status === "uploading";

  return (
    <ThumbnailContainer
      title={description ?? name}
      tabIndex={0}
      status={status}
      state={state}
      onFocus={() => {
        onSelect?.(assetContainer);
      }}
      onBlur={(event: FocusEvent) => {
        const isFocusWithin = event.currentTarget.contains(event.relatedTarget);
        if (isFocusWithin === false) {
          onSelect();
        }
      }}
      onKeyDown={(event: KeyboardEvent) => {
        if (event.code === "Enter") {
          onChange?.(assetContainer);
        }
      }}
    >
      <Thumbnail
        onClick={() => {
          onChange?.(assetContainer);
        }}
      >
        {isVideoFormat(assetContainer.asset.format) &&
        assetContainer.status === "uploading" ? (
          <StyledWebstudioVideo width={64} src={assetContainer.objectURL} />
        ) : (
          <StyledWebstudioImage
            assetId={assetContainer.asset.id}
            name={assetContainer.asset.name}
            objectURL={
              assetContainer.status === "uploading"
                ? assetContainer.objectURL
                : undefined
            }
            alt={description ?? name}
            // width={64} used for Image optimizations it should be approximately equal to the width of the picture on the screen in px
            width={64}
          />
        )}
      </Thumbnail>
      <Box
        css={{
          width: "100%",
          // @todo should be a token from design system
          height: 12,
        }}
      >
        <Filename variant={"tiny"}>{name}</Filename>
      </Box>
      {assetContainer.status === "uploaded" && (
        <ImageInfoTrigger
          asset={assetContainer.asset}
          onDelete={(ids) => {
            onDelete(ids);
          }}
        />
      )}
      {isUploading && <UploadingAnimation />}
    </ThumbnailContainer>
  );
};
